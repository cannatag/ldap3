===================
Extended Operations
===================

Extended operations are defined In the connection object in the 'extend' attribute.

Extended operations are logically grouped by their use and vendor::

    extend.standard
      extend.standard.who_am_i()
      extend.standard.modify_password(user, old_password, new_password, hash_algorithm=None, salt=None)
      extend.standard.paged_search(search_base, search_filter, search_scope, dereference_aliases, attributes, size_limit, time_limit, types_only, get_operational_attributes, controls, paged_size, paged_criticality, generator)
    extend.novell
      extend.novell.get_bind_dn()
      extend.novell.get_universal_password(user)
      extend.novell.set_universal_password(user, new_password)
    extend.microsoft
      [None for now]

You can call the requested operation and get the extended result back as specified in the relevant rfc or documentation. The result dictionary is augmented with the specific keys of the extendedResponse.


Just call the extend operation in the usual way, for example::

    c = Connection(....)
    c.bind()
    i_am = c.extend.standard.who_am_i()

The payload of these extended operation is properly encoded and decoded. When available you should get the response value as the return value of the function and as an additional field of the result dictionary

For example::

    s = Server(...)
    c = Connection(s, ...)
    c.bind()  # bind as someone that has permission to change user's password
    new_password = c.extend.standard.modify_password('cn=test1,o=test', 'old_password', 'new_password', 'SALTED_SHA256')  # a new password is set, hashed with sha256 and a random salt


A special case with modify_password is for LDAP servers that follow RFC3062. If you send the old password and do not specify
a new password, the server should generate a new password compliant with the server password policy::

    s = Server(...)
    c = Connection(s, ...)
    c.bind()  # bind as someone that has permission to change user's password
    new_password = c.extend.standard.modify_password('cn=test1,o=test', 'old_password')  # a new password is generated by the server if compliant with RFC3062


The extend.standard.paged_search() operation is a convenient wrapper for the simple paged search as specified in the
RFC2696. You can indicate how many entries will be read in the paged_size parameter (defaults to 100) and you get back
a *generator* for the entries.
If you set to False the generator parameter of the search will be fully executed before returning the results.
If generator is set to True (the default) any subsequent search will be executed only when you read all the previous
read entries, saving memory.

Novell extended operations are specific for the Novell (NetIq) eDirectory LDAP Server and return and set the universal
password of the specified user.

Microsoft extended operations are intended for Active Directory. Ask for their implementation on the support site of ldap3.

In the modify_password() extended operation you can specify an hashing algorithm, if this is requested by your LDAP server.

Algorithms names are defined in the ldap3 module. You can choose between:

* HASHED_NONE (no hashing is performed, password is sent in plain text)
* HASHED_MD5
* HASHED_SHA
* HASHED_SHA256
* HASHED_SHA384
* HASHED_SHA512
* HASHED_SALTED_MD5
* HASHED_SALTED_SHA
* HASHED_SALTED_SHA256
* HASHED_SALTED_SHA384
* HASHED_SALTED_SHA512

If you don't specify a *salt* parameter a random salt will be generated by the ldap3 library. Keep in mind that only
salted password can provide a strong level of security againsts dictionary attacks.


